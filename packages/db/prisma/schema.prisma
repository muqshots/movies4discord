generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Server {
  EU
  US
  AS
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  created_at         Int?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  server        Server      @default(EU)
  admin         Boolean     @default(false)

  accounts      Account[]
  History       History[]
  Pincodes      Pincode[]
  Sessions      Session[]
  Viewkeys      Viewkey[]
  Watchlist     Watchlist[]
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  isShow    Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, isShow])
}

model Viewkey {
  key       String   @id @default(cuid())
  userId    String
  tmvdbId   Int
  isShow    Boolean
  season    Int
  episode   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmvdbId, isShow, season, episode])
}

model History {
  id         String   @id @default(cuid())
  userId     String
  tmdbId     Int
  tvdbId     Int
  isShow     Boolean
  season     Int
  episode    Int
  percentage Float
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, tvdbId, isShow, season, episode])
}

model Pincode {
  id        String   @id @default(cuid())
  userId    String
  pincode   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pincode])
}

model IntroHash {
  id        String @id @default(cuid())
  tmdbId    Int
  tvdbId    Int
  season    Int
  startHash String
  endHash   String

  @@index([tvdbId, season])
}

model IntroTimestamp {
  id             String @id @default(cuid())
  tmdbId         Int
  tvdbId         Int
  season         Int
  episode        Int
  startTimestamp Int
  endTimestamp   Int

  @@index([tvdbId, season, episode])
}